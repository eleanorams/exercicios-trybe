const decemberDaysList = [
  27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
];

const createDaysOfTheWeek = () => {
  const weekDays = [
    "Domingo",
    "Segunda",
    "Ter√ßa",
    "Quarta",
    "Quinta",
    "Sexta",
    "S√°bado",
  ];
  const weekDaysList = document.querySelector(".week-days");

  for (let index = 0; index < weekDays.length; index += 1) {
    const days = weekDays[index];
    const dayListItem = document.createElement("li");
    dayListItem.innerHTML = days;

    weekDaysList.appendChild(dayListItem);
  }
};

createDaysOfTheWeek();

//   O array decemberDaysList cont√©m os dois √∫ltimos dias de novembro e os dias do m√™s de dezembro. Sua fun√ß√£o deve criar dinamicamente cada dia do calend√°rio e os adicionar dentro da tag <ul>.

// Escreva seu c√≥digo abaixo.

const createDaysList = () => {
  const ulDays = document.getElementById("days");
  for (let index = 0; index < decemberDaysList.length; index += 1) {
    const liDays = document.createElement("li");
    liDays.className = "day";
    liDays.innerHTML = decemberDaysList[index];
    ulDays.appendChild(liDays);
    if (
      decemberDaysList[index] === 24 ||
      decemberDaysList[index] === 25 ||
      decemberDaysList[index] === 31
    ) {
      liDays.classList.add("holiday");
    }
  }
  friday();
};

const friday = () => {
  const getFriday = document.getElementsByClassName("day");
  for (let index = 5; index < getFriday.length; index += 7) {
    getFriday[index].classList.add("friday");
  }
};

// Parte 2
// Implemente uma fun√ß√£o que crie dinamicamente um bot√£o com o nome ‚ÄúFeriados‚Äù;
// Sua fun√ß√£o deve receber um par√¢metro com a string 'Feriados';
// Adicione a este bot√£o a ID "btn-holiday";
// Adicione este bot√£o como filho/filha da tag <div> com classe "buttons-container".
// Parte 3
// Implemente uma fun√ß√£o que muda a cor de fundo dos dias que possuem a classe "holiday";
// Adicione ao bot√£o "Feriados" um evento de "click" que altere a cor de fundo dos dias que possuem a classe "holiday".
// De olho na dica üëÄ: √â interessante que esse bot√£o possua tamb√©m a l√≥gica inversa. Ao ser clicado novamente, ele retorna √† configura√ß√£o inicial com a cor ‚Äúrgb(238,238,238)‚Äù.

const corFeriados = () => {
  const captHoliday = document.getElementsByClassName("holiday");
  for (let index = 0; index < captHoliday.length; index += 1) {
    if (captHoliday[index].style.backgroundColor === "pink") {
      captHoliday[index].style.backgroundColor = "unset";
    } else {
      captHoliday[index].style.backgroundColor = "pink";
    }
  }
};

// Parte 4
// Implemente uma fun√ß√£o que crie dinamicamente um bot√£o com o nome "Sexta-feira";
// Sua fun√ß√£o deve receber como par√¢metro a string ‚ÄúSexta-feira‚Äù;
// Adicione a esse bot√£o o ID "btn-friday";
// Adicione esse bot√£o como filho/filha da tag <div> com classe "buttons-container".

// Parte 5
// Implemente uma fun√ß√£o que modifica o texto exibido nos dias que s√£o Sexta-feira;
// Adicione ao bot√£o ‚ÄúSexta-feira‚Äù um evento de ‚Äúclick‚Äù e modifique o texto a ser exibido nos dias que s√£o sextas-feiras.
// De olho na dica üëÄ: √â interessante que esse bot√£o possua tamb√©m a l√≥gica inversa. Ao ser clicado novamente, ele retorna √† configura√ß√£o inicial exibindo os dias.
const corSexta = () => {
  const captFriday = document.getElementsByClassName("friday");
  const arrayDeSextas = ["2", "9", "16", "23", "30"];

  for (let index = 0; index < captFriday.length; index += 1) {
    if (captFriday[index].innerText === "Sexta!!!") {
      captFriday[index].innerText = arrayDeSextas[index];
    } else {
      captFriday[index].innerText = "Sexta!!!";
    }
  }
};

// Parte 6
// Implemente duas fun√ß√µes que criem um efeito de ‚Äúzoom‚Äù;
// Ao passar o ponteiro do mouse em um dia do m√™s no calend√°rio, o texto desse dia deve aumentar e, quando o ponteiro do mouse sair do dia, o texto deve retornar ao tamanho original.
const zoom = () => {
  const captDays = document.getElementsByClassName("day");
  for (let index = 0; index < captDays.length; index += 1) {
    captDays[index].addEventListener("mouseover", () => {
      captDays[index].style.fontSize = "26px";
    });
    captDays[index].addEventListener("mouseout", () => {
      captDays[index].style.fontSize = "20px";
    });
  }
};

// Parte 7
// Implemente uma fun√ß√£o que adicione uma tarefa personalizada ao calend√°rio;
// A fun√ß√£o deve receber como par√¢metro a string com o nome da tarefa (ex: ‚Äúcozinhar‚Äù) e criar dinamicamente um elemento com a tag <span> contendo a tarefa;
// O elemento criado dever√° ser adicionado como filho/filha da tag <div> que possui a classe "my-tasks".

const myTasks = (string) => {
  const captMyTasks = document.querySelector(".my-tasks");
  const setSpan = document.createElement("span");
  setSpan.innerText = string;
  captMyTasks.appendChild(setSpan);
};

// Parte 8
// Implemente uma fun√ß√£o que adicione uma legenda com cor para a tarefa;
// Essa fun√ß√£o dever√° receber como par√¢metro uma string (‚Äòcor‚Äô) e criar dinamicamente um elemento de tag <div> com a classe task;
// O par√¢metro cor dever√° ser utilizado como cor de fundo da <div> criada;
// O elemento criado dever√° ser adicionado como filho/filha da tag <div> que possui a classe "my-tasks".

const myTasksColor = (cor) => {
  const captMyTasks = document.querySelector(".my-tasks");
  const setColor = document.createElement("div");
  setColor.style.backgroundColor = cor;
  setColor.style.width = "10px";
  setColor.style.height = "10px";
  setColor.style.marginRight = "10px";
  setColor.classList = "task";
  captMyTasks.appendChild(setColor);
};

// Parte 9
// Implemente uma fun√ß√£o que selecione uma tarefa;
// Adicione um evento que ao clicar no elemento com a tag <div> referente √† cor da sua tarefa, atribua a esse elemento a classe task selected, ou seja, quando sua tarefa possuir a classe task selected ela estar√° selecionada;
// Ao clicar novamente no elemento, a sua classe dever√° voltar a ser somente task, ou seja, essa tarefa est√° deixando de ser uma tarefa selecionada.

const setTaskClass = () => {
  let selectedTask = document.getElementsByClassName('task selected');
  let myTasks = document.querySelector('.task');
  myTasks.addEventListener('click', (event) => {
    if (selectedTask.length === 0) {
      event.target.className = 'task selected';
    } else {
      event.target.className = 'task';
    }
  });
}

//Criando Bot√£o geral
function createButton(Feriados, id, fun√ßao) {
  const btnContainer = document.getElementsByClassName("buttons-container")[0];
  const botao = document.createElement("button");
  botao.id = id;
  btnContainer.appendChild(botao);
  botao.innerHTML = Feriados;
  botao.addEventListener("click", fun√ßao);
}

window.onload = () => {
  createDaysList();
  zoom();
  myTasksColor("pink");
  myTasks("Estudar");
  setTaskClass();
  createButton("Feriados", "btn-holiday", corFeriados);
  createButton("Sexta-feira", "btn-friday", corSexta);
  changeHolidayColor();
};
